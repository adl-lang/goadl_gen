// Code generated by goadlc v3 - DO NOT EDIT.
package gotypes

import (
	goadl "github.com/adl-lang/goadl_rt/v3"
	"github.com/adl-lang/goadl_rt/v3/customtypes"
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadl_rt/v3/sys/types"
)

func Texpr_GoTypes() adlast.ATypeExpr[GoTypes] {
	te := adlast.Make_TypeExpr(
		adlast.Make_TypeRef_reference(
			adlast.Make_ScopedName("cli.gotypes", "GoTypes"),
		),
		[]adlast.TypeExpr{},
	)
	return adlast.Make_ATypeExpr[GoTypes](te)
}

func AST_GoTypes() adlast.ScopedDecl {
	decl := adlast.MakeAll_Decl(
		"GoTypes",
		types.Make_Maybe_nothing[uint32](),
		adlast.Make_DeclType_struct_(
			adlast.MakeAll_Struct(
				[]adlast.Ident{},
				[]adlast.Field{
					adlast.MakeAll_Field(
						"Root",
						"-",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"cli.root",
											"Root",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"loader",
						"-",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"cli.loader",
											"LoadResult",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"goMod",
						"-",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Nullable",
							),
							[]adlast.TypeExpr{
								adlast.MakeAll_TypeExpr(
									adlast.Make_TypeRef_reference(
										adlast.MakeAll_ScopedName(
											"cli.gomod",
											"GoModResult",
										),
									),
									[]adlast.TypeExpr{},
								),
							},
						),
						types.Make_Maybe_just[any](
							nil,
						),
						customtypes.MapMap[adlast.ScopedName, any]{},
					),
					adlast.MakeAll_Field(
						"NoGoFmt",
						"NoGoFmt",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Bool",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							false,
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Don't run 'go fmt' on the generated files\n"},
					),
					adlast.MakeAll_Field(
						"GoAdlPath",
						"GoAdlPath",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							"github.com/adl-lang/goadl_rt/v3",
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "The path to the Go ADL runtime import\n"},
					),
					adlast.MakeAll_Field(
						"ExcludeAst",
						"ExcludeAst",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Bool",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							false,
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Don't generate type expr, scoped decl and init registration functions\n"},
					),
					adlast.MakeAll_Field(
						"StdLibGen",
						"StdLibGen",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"Bool",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_just[any](
							false,
						),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "Used for bootstrapping, only use when generating the sys.aldast & sys.types modules\n"},
					),
					adlast.MakeAll_Field(
						"Outputdir",
						"Outputdir",
						adlast.MakeAll_TypeExpr(
							adlast.Make_TypeRef_primitive(
								"String",
							),
							[]adlast.TypeExpr{},
						),
						types.Make_Maybe_nothing[any](),
						customtypes.MapMap[adlast.ScopedName, any]{adlast.Make_ScopedName("sys.annotations", "Doc"): "output dir\n"},
					),
				},
			),
		),
		customtypes.MapMap[adlast.ScopedName, any]{},
	)
	return adlast.Make_ScopedDecl("cli.gotypes", decl)
}

func init() {
	goadl.RESOLVER.Register(
		adlast.Make_ScopedName("cli.gotypes", "GoTypes"),
		AST_GoTypes(),
	)
}

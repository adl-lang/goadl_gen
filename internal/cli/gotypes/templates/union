{{$decl := .}}
{{$name := .Name | .G.GoEscape | public}}
type {{$name}}{{$decl.TypeParams.LSide}} struct {
	Branch {{$name}}Branch{{$decl.TypeParams.RSide}}
}

type {{$name}}Branch{{$decl.TypeParams.LSide}} interface {
	is{{$name}}Branch()
}

func (*{{$name}}{{.TypeParams.RSide}}) MakeNewBranch(key string) (any, error) {
	switch key {
	{{range .Branches -}}{{$type := .G.GoType .TypeExpr .Annotations}}case "{{.SerializedName}}":
		return &_{{$name}}_{{.Name | public}}{{$type.UnionTypeParams.RSide}}{}, nil
	{{end}}}
	return nil, {{.G.GoImport "fmt"}}Errorf("unknown branch is : %s", key)
}

{{range .Branches -}}{{$type := .G.GoType .TypeExpr .Annotations}}
type _{{$name}}_{{.Name | public}}{{$type.UnionTypeParams.LSide}} struct {
	V {{$type}} `branch:"{{.Name}}"`
}{{end}}

{{range .Branches -}}{{$Type := .G.GoType .TypeExpr .Annotations}}
func (_{{$name}}_{{.Name | public}}{{$Type.UnionTypeParams.RSide}}) is{{$name}}Branch() {}
{{- end}}

{{range .Branches -}}{{$Type := .G.GoType .TypeExpr .Annotations}}
{{if .IsVoid -}}
func Make_{{$name}}_{{.Name}}{{$decl.TypeParams.LSide}}() {{$name}}{{$decl.TypeParams.RSide}} {
	return {{$name}}{{$decl.TypeParams.RSide}}{
		_{{$name}}_{{.Name | public}}{{$Type.UnionTypeParams.RSide}}{struct{}{}},
	}
}
{{- else -}}
func Make_{{$name}}_{{.Name}}{{$decl.TypeParams.LSide}}(v {{$Type}}) {{$name}}{{$decl.TypeParams.RSide}} {
	return {{$name}}{{$decl.TypeParams.RSide}}{
		_{{$name}}_{{.Name | public}}{{$Type.UnionTypeParams.RSide}}{v},
	}
}
{{- end}}
{{end}}

{{range .Branches -}}{{$Type := .G.GoType .TypeExpr .Annotations}}
func (un {{$name}}{{$decl.TypeParams.RSide}})Cast_{{.Name}}() ({{$Type}}, bool) {
	br, ok := un.Branch.(_{{$name}}_{{.Name | public}}{{$Type.UnionTypeParams.RSide}})
	return br.V, ok
}
{{end}}

{{$htp := .TypeParams.AddParam "T"}}

func Handle_{{$name}}{{$htp.LSide}}(
	_in {{$name}}{{.TypeParams.RSide}},{{range .Branches}}{{$Type := .G.GoType .TypeExpr .Annotations}}
	{{.Name}} func({{.Name}} {{$Type}}) ({{$htp.Last}}),{{end}}
	_default func() {{$htp.Last}},
) ({{$htp.Last}}) {
	switch _b := _in.Branch.(type) {
	{{range .Branches -}}{{- $Type := .G.GoType .TypeExpr .Annotations -}}
	case _{{$name}}_{{.Name | public}}{{$Type.UnionTypeParams.RSide}}:
		if {{.Name}} != nil {
			return {{.Name}}(_b.V)
		}
	{{end}}}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : {{$name}}")
}

func HandleWithErr_{{$name}}{{$htp.LSide}}(
	_in {{$name}}{{.TypeParams.RSide}},{{range .Branches}}{{$Type := .G.GoType .TypeExpr .Annotations}}
	{{.Name}} func({{.Name}} {{$Type}}) ({{$htp.Last}}, error),{{end}}
	_default func() ({{$htp.Last}}, error),
) ({{$htp.Last}}, error) {
	switch _b := _in.Branch.(type) {
	{{range .Branches -}}{{$Type := .G.GoType .TypeExpr .Annotations -}}
	case _{{$name}}_{{.Name | public}}{{$Type.UnionTypeParams.RSide}}:
		if {{.Name}} != nil {
			return {{.Name}}(_b.V)
		}
	{{end}}}
	if _default != nil {
		return _default()
	}
	panic("unhandled branch in : {{$name}}")
}

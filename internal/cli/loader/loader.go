// Code generated by goadlc v3 - DO NOT EDIT.
package loader

import (
	"github.com/adl-lang/goadl_rt/v3/sys/adlast"
	"github.com/adl-lang/goadlc/internal/cli/root"
)

type BundleMap struct {
	_BundleMap
}

type _BundleMap struct {
	AdlModuleNamePrefix string  `json:"AdlModuleNamePrefix"`
	GoModPath           string  `json:"GoModPath"`
	AdlSrc              string  `json:"AdlSrc"`
	GoModVersion        *string `json:"GoModVersion"`
	Path                *string `json:"Path"`
}

func MakeAll_BundleMap(
	adlmodulenameprefix string,
	gomodpath string,
	adlsrc string,
	gomodversion *string,
	path *string,
) BundleMap {
	return BundleMap{
		_BundleMap{
			AdlModuleNamePrefix: adlmodulenameprefix,
			GoModPath:           gomodpath,
			AdlSrc:              adlsrc,
			GoModVersion:        gomodversion,
			Path:                path,
		},
	}
}

func Make_BundleMap(
	adlmodulenameprefix string,
	gomodpath string,
	adlsrc string,
) BundleMap {
	ret := BundleMap{
		_BundleMap{
			AdlModuleNamePrefix: adlmodulenameprefix,
			GoModPath:           gomodpath,
			AdlSrc:              adlsrc,
			GoModVersion:        ((*BundleMap)(nil)).Default_GoModVersion(),
			Path:                ((*BundleMap)(nil)).Default_Path(),
		},
	}
	return ret
}

func (*BundleMap) Default_GoModVersion() *string {
	return nil
}
func (*BundleMap) Default_Path() *string {
	return nil
}

type LoadResult struct {
	_LoadResult
}

type _LoadResult struct {
	CombinedAst map[string]adlast.Module `json:"CombinedAst"`
	Modules     []NamedModule            `json:"Modules"`
	Files       []string                 `json:"Files"`
	BundleMaps  []BundleMap              `json:"BundleMaps"`
}

func MakeAll_LoadResult(
	combinedast map[string]adlast.Module,
	modules []NamedModule,
	files []string,
	bundlemaps []BundleMap,
) LoadResult {
	return LoadResult{
		_LoadResult{
			CombinedAst: combinedast,
			Modules:     modules,
			Files:       files,
			BundleMaps:  bundlemaps,
		},
	}
}

func Make_LoadResult(
	combinedast map[string]adlast.Module,
	modules []NamedModule,
	files []string,
	bundlemaps []BundleMap,
) LoadResult {
	ret := LoadResult{
		_LoadResult{
			CombinedAst: combinedast,
			Modules:     modules,
			Files:       files,
			BundleMaps:  bundlemaps,
		},
	}
	return ret
}

type Loader struct {
	_Loader
}

type _Loader struct {
	Root         *root.Root  `json:"-"`
	BundleMaps   []BundleMap `json:"BundleMaps"`
	Searchdir    []string    `json:"Searchdir"`
	Files        []string    `json:"Files"`
	WorkingDir   string      `json:"WorkingDir"`
	MergeAdlext  string      `json:"MergeAdlext"`
	UserCacheDir string      `json:"UserCacheDir"`
}

func MakeAll_Loader(
	root *root.Root,
	bundlemaps []BundleMap,
	searchdir []string,
	files []string,
	workingdir string,
	mergeadlext string,
	usercachedir string,
) Loader {
	return Loader{
		_Loader{
			Root:         root,
			BundleMaps:   bundlemaps,
			Searchdir:    searchdir,
			Files:        files,
			WorkingDir:   workingdir,
			MergeAdlext:  mergeadlext,
			UserCacheDir: usercachedir,
		},
	}
}

func Make_Loader(
	files []string,
) Loader {
	ret := Loader{
		_Loader{
			Root:         ((*Loader)(nil)).Default_Root(),
			BundleMaps:   ((*Loader)(nil)).Default_BundleMaps(),
			Searchdir:    ((*Loader)(nil)).Default_Searchdir(),
			Files:        files,
			WorkingDir:   ((*Loader)(nil)).Default_WorkingDir(),
			MergeAdlext:  ((*Loader)(nil)).Default_MergeAdlext(),
			UserCacheDir: ((*Loader)(nil)).Default_UserCacheDir(),
		},
	}
	return ret
}

func (*Loader) Default_Root() *root.Root {
	return nil
}
func (*Loader) Default_BundleMaps() []BundleMap {
	return []BundleMap{}
}
func (*Loader) Default_Searchdir() []string {
	return []string{}
}
func (*Loader) Default_WorkingDir() string {
	return "{{.OS.MkdirTemp \"\" \"goadlc-\"}}"
}
func (*Loader) Default_MergeAdlext() string {
	return ""
}
func (*Loader) Default_UserCacheDir() string {
	return "{{.OS.UserCacheDir}}"
}

type NamedModule struct {
	_NamedModule
}

type _NamedModule struct {
	Name    string         `json:"Name"`
	Module_ *adlast.Module `json:"Module_"`
}

func MakeAll_NamedModule(
	name string,
	module_ *adlast.Module,
) NamedModule {
	return NamedModule{
		_NamedModule{
			Name:    name,
			Module_: module_,
		},
	}
}

func Make_NamedModule(
	name string,
	module_ *adlast.Module,
) NamedModule {
	ret := NamedModule{
		_NamedModule{
			Name:    name,
			Module_: module_,
		},
	}
	return ret
}

package gen_go

import (
	"fmt"
	"os"
	"text/template"

	"github.com/jpillora/opts"
)

func NewGenTypeExprV3() opts.Opts {
	return opts.New(&texprV2Cmd{})
}

type texprV2Cmd struct {
}

var (
	tmpl = `
func Texpr_{{.ADL}}() ATypeExpr[{{.Go}}] {
	te := Make_TypeExpr(
		Make_TypeRef_primitive("{{.ADL}}"),
		[]TypeExpr{},
	)
	return Make_ATypeExpr[{{.Go}}](te)
}
`
	paramTmpl = `
func Texpr_{{.ADL}}[T any](te ATypeExpr[T]) ATypeExpr[{{.Go}}T] {
	te0 := Make_TypeExpr(
		Make_TypeRef_primitive("{{.ADL}}"),
		[]TypeExpr{
			te.Value,
		},
	)
	return Make_ATypeExpr[{{.Go}}T](te0)
}
`
)

var texprData = []struct {
	ADL   string
	Go    string
	param bool
}{
	{"Vector", "[]", true},
	{"StringMap", "map[string]", true},
	{"Nullable", "*", true},
	{"Int8", "int8", false},
	{"Int16", "int16", false},
	{"Int32", "int32", false},
	{"Int64", "int64", false},
	{"Word8", "uint8", false},
	{"Word16", "uint16", false},
	{"Word32", "uint32", false},
	{"Word64", "uint64", false},
	{"Bool", "bool", false},
	{"Float", "float64", false},
	{"Double", "float64", false},
	{"String", "string", false},
	// {"ByteVector", "[]byte"},
	{"Void", "struct{}", false},
	{"Json", "any", false},
}

func (in *texprV2Cmd) Run() error {
	t, err := template.New("").Parse(tmpl)
	if err != nil {
		return err
	}
	pt, err := template.New("").Parse(paramTmpl)
	if err != nil {
		return err
	}
	fmt.Printf(`// Code generated by goadlc v3 - DO NOT EDIT.
package goadl

import (
	. "github.com/adl-lang/goadl_rt/v3/sys/adlast"
)

type ATypeExpr[T any] struct {
	_ATypeExpr[T]
}

type _ATypeExpr[T any] struct {
	Value TypeExpr %s
}

func MakeAll_ATypeExpr[T any](
	value TypeExpr,
) ATypeExpr[T] {
	return ATypeExpr[T]{
		_ATypeExpr[T]{
			Value: value,
		},
	}
}

func Make_ATypeExpr[T any](
	value TypeExpr,
) ATypeExpr[T] {
	ret := ATypeExpr[T]{
		_ATypeExpr[T]{
			Value: value,
		},
	}
	return ret
}
`, "`json:\"value\"`")
	for _, te := range texprData {
		if te.param {
			err = pt.Execute(os.Stdout, te)
		} else {
			err = t.Execute(os.Stdout, te)
		}
		if err != nil {
			return err
		}
	}
	return nil
}

{{$name := .Name|public -}}
type {{$name}}{{.TypeParams.LSide}} struct {
	Branch {{$name}}Branch{{.TypeParams.RSide}}
}

type {{$name}}Branch{{.TypeParams.LSide}} interface {
	is{{$name}}Branch()
}

{{range .Branches -}}
type {{$name}}Branch_{{.Name}}{{.TypeParams.LSide}} struct {
	v {{.Type}} `branch:"{{.Name}}"`
}
{{end}}

{{range .Branches -}}
func ({{$name}}Branch_{{.Name}}{{.TypeParams.RSide}}) is{{$name}}Branch() {}
{{end}}

{{range .Branches -}}
func Make_{{$name}}_{{.Name}}{{.TypeParams.LSide}}(v {{.Type}}) {{$name}}{{.TypeParams.RSide}} {
	return {{$name}}{{.TypeParams.RSide}}{
		{{$name}}Branch_{{.Name}}{{.TypeParams.RSide}}{v},
	}
}
{{end}}

{{$htp := .TypeParams.AddParam "T"}}
func Handle_{{$name}}{{$htp.LSide}}(
	in {{$name}}Branch{{.TypeParams.RSide}},{{range .Branches}}
	{{.Name}} func({{.Name}} {{$name}}Branch_{{.Name}}{{.TypeParams.RSide}}) ({{$htp.Last}}, error),{{end}}
) ({{$htp.Last}}, error) {
	switch b := in.(type) {
	{{range .Branches -}}
	case {{$name}}Branch_{{.Name}}{{.TypeParams.RSide}}:
		return {{.Name}}(b)
	{{end}}
	}
	panic("code gen error unhandled branch in : {{$name}}")
}

{{$G := .G}}
func AST_{{.Name}}() {{$G.Import "goadl"}}.ScopedDecl {
	var decl {{$G.Import "goadl"}}.Decl
	dec := {{.G.Import "json"}}.NewDecoder({{.G.Import "strings"}}.NewReader(`{{.G.JsonEncode .Decl}}`))
	dec.Decode(&decl)
	return {{$G.Import "goadl"}}.ScopedDecl{
		ScopedName: {{$G.Import "goadl"}}.ScopedName{
			ModuleName: "{{.ModuleName}}",
			Name:       "{{.Name}}",
		},
		Decl: decl,
	}
}

{{$name := .Name}}
func init() {
	goadl.RESOLVER.Register(
		goadl.ScopedName{ModuleName: "{{.ModuleName}}", Name: "{{.Name}}"},
		goadl.ScopedInfo{
			SD: AST_{{.Name}}(),
			TypeMap: map[string]{{$G.Import "reflect"}}.Type{ {{- range .Fields}}
				"{{.SerializedName}}": {{$G.Import "reflect"}}.TypeOf({{$name}}Branch_{{.Name}}{{.Type.TypeParams.TpArgs}}{}),{{end}}
			},
		},
	)
}
